-- MySQL Script generated by MySQL Workbench
-- Wed Jun 17 17:42:30 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema carpinteriaCompras
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema carpinteriaCompras
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `carpinteriaCompras` DEFAULT CHARACTER SET utf8 ;
USE `carpinteriaCompras` ;

-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`proveedor` (
  `idProveedor` INT NOT NULL AUTO_INCREMENT,
  `nombreEmpresa` VARCHAR(100) NOT NULL,
  `ruc` INT NOT NULL,
  `direccion` VARCHAR(100) NOT NULL,
  `telefono` VARCHAR(20) NOT NULL,
  `email` VARCHAR(50) NULL,
  PRIMARY KEY (`idProveedor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`ordenDeCompra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`ordenDeCompra` (
  `idOrdenDeCompra` INT NOT NULL AUTO_INCREMENT,
  `idUsuario` INT NOT NULL,
  `idProveedor` INT NOT NULL,
  `condicionPago` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NULL,
  PRIMARY KEY (`idOrdenDeCompra`),
  
  INDEX `fk_ordenDeCompra_usuario_idx1` (`idProveedor` ASC) ,
  INDEX `fk_ordenDeCompra_usuario_idx` (`idUsuario` ASC) ,
  CONSTRAINT `fk_ordenDeCompra_proveedor`
    FOREIGN KEY (`idProveedor`)
    REFERENCES `carpinteriaCompras`.`proveedor` (`idProveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ordenDeCompra_usuario`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `carpinteriaCompras`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`articulo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`articulo` (
  `idArticulo` INT NOT NULL AUTO_INCREMENT,
  `categoria` VARCHAR(100) NULL,
  `codigo` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `descripcion` VARCHAR(256) NULL,
  `caducidad` VARCHAR(50) NULL,
  PRIMARY KEY (`idArticulo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`nuevoIngreso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`nuevoIngreso` (
  `idNuevoIngreso` INT NOT NULL AUTO_INCREMENT,
  `idProveedor` INT NOT NULL,
  `tipoSerie` INT NOT NULL,
  `serieComprobante` INT NOT NULL,
  `numOrdenDeCompra` INT NOT NULL,
  `condicionPago` VARCHAR(45) NOT NULL,
  `timbrado` INT NOT NULL,
  `fecha` DATETIME NULL,
  PRIMARY KEY (`idNuevoIngreso`),
  INDEX `fk_nuevoIngreso_proveedor_idx` (`idProveedor` ASC) ,
  CONSTRAINT `fk_nuevoIngreso_proveedor`
    FOREIGN KEY (`idProveedor`)
    REFERENCES `carpinteriaCompras`.`proveedor` (`idProveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`detalleIngreso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`detalleIngreso` (
  `idDetalleIngreso` INT NOT NULL AUTO_INCREMENT,
  `idNuevoIngreso` INT NOT NULL,
  `idArticulo` INT NOT NULL,
  `cantidad` DECIMAL(6,2) NOT NULL,
  `precioCompra` DECIMAL(12,2) NOT NULL,
  `precioVenta` DECIMAL(12,2) NOT NULL,
  PRIMARY KEY (`idDetalleIngreso`),
  INDEX `fk_detalleIngreso_articulo_idx` (`idArticulo` ASC) ,
  INDEX `fk_detalleIngreso_nuevoIngreso_idx` (`idNuevoIngreso` ASC) ,
  CONSTRAINT `fk_detalleIngreso_articulo`
    FOREIGN KEY (`idArticulo`)
    REFERENCES `carpinteriaCompras`.`articulo` (`idArticulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_detalleIngreso_nuevoIngreso`
    FOREIGN KEY (`idNuevoIngreso`)
    REFERENCES `carpinteriaCompras`.`nuevoIngreso` (`idNuevoIngreso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `carpinteriaCompras`.`detalleOrdenDeCompra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carpinteriaCompras`.`detalleOrdenDeCompra` (
  `idDetalleOrdenDeCompra` INT NOT NULL AUTO_INCREMENT,
  `idetalleOrdenDeCompra` INT NOT NULL AUTO_INCREMENT,
  `idOrdenDeCompra` INT NOT NULL,
  `idArticulo` INT NOT NULL,
  `cantidad` DECIMAL(6,2) NOT NULL,
  `precio` DECIMAL(12,2) NOT NULL,
  PRIMARY KEY (`iddetalleOrdenDeCompra`),
  INDEX `fk_detalleOrdenDeCompra_articulo_idx` (`idArticulo` ASC) ,
  INDEX `fk_detalleOrdenDeCompra_ordenDeCompra_idx` (`idOrdenDeCompra` ASC) ,
  CONSTRAINT `fk_detalleOrdenDeCompra_articulo`
    FOREIGN KEY (`idArticulo`)
    REFERENCES `carpinteriaCompras`.`articulo` (`idArticulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_detalleOrdenDeCompra_ordenDeCompra`
    FOREIGN KEY (`idOrdenDeCompra`)
    REFERENCES `carpinteriaCompras`.`ordenDeCompra` (`idOrdenDeCompra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
